{
  "hash": "0166da35521659b72da4a69353d3da97",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R, RStudio and Quarto\"\n---\n\n\n\n![](../images/postverta_long.png)\n\n## Overview\n\n\n[R](https://www.r-project.org/) is a free software environment for statistical computing and graphics. It is whatâ€™s known as 'open source', which means that unlike commercial software companies that protectively hide away the code on which their software is based, the people who developed R allow everyone to access their code. This open source philosophy allows anyone, anywhere to contribute to the software. Consequently, the capabilities of R dynamically expand as people from all over the world add to it.\nIn essence, R exists as a base package with a reasonable amount of functionality. Once you have downloaded R and installed it on your own computer, you can start doing some data analysis and graphs. However, the beauty of R is that it can be expanded by downloading packages that add specific functionality to the program.\nCommands in R are generally made up of two parts: objects and functions. These are separated by `<-`, which you can think of meaning 'is created from'. As such, the general form of a command is:\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhich means the object called `name_of_object` is created from the function that goes by the name of `the_function_I_want_to_use`. An object is anything created in R. It could be a variable, a collection of variables, a statistical model etc. Objects can be single values (such as the mean of a set of scores) or collections of information; for example, when you run an analysis, you create an object that contains the output of that analysis, which means that this object contains many different values and variables. Functions are the things that you do in R to create your objects.\n\nThe best way to learn R (in my opinion) is to install and work through one my packages of interactive tutorials. The `adventr` package aligns to the material in [An Adventure in Statistics](ais.qmd) whereas the `discovr` package aligns to the material in [Discovering Statistics Using R and RStudio](dsur.qmd). If you don't own either of these books use the `discovr` package.\n\n## Interactive tutorials to learn R\n\n- [The `discovr` package](https://www.discovr.rocks/discovr/)\n- [The `adventr` package](https://www.statisticsadventure.com/adventr/)\n\n## Video tutorials\n\n### Getting Started in R\n\nTo help you set up and work with R I recommend working through these video tutorials, which introduce you to the workflow in RStudio cloud, and give you a tour of the RStudio app.\n\n#### Workflow in Posit (RStudio) Cloud\n\n\n\n{{< video https://www.youtube.com/embed/E85oERB3kCQ >}}\n\n\n\n\n#### Customizing RStudio cloud\n\n\n\n{{< video https://www.youtube.com/embed/jAHJyeOqe24 >}}\n\n\n\n\n\n### Quarto\n\nQuarto is used to create documents in RStudio. It combines standard word processing (similar to apps that you might already use such as MS Word) with coding to produce documents in which you integrate data processing, data visualisation, statistical modelling and interpretation. This series of videos helps you to get started using Quarto.\n\n#### Quarto visual editor [Part 1]\n\n\n\n{{< video https://www.youtube.com/embed/31Q9ZTZOHIM >}}\n\n\n\n\n#### Quarto visual editor [Part 2]\n\n\n\n{{< video https://www.youtube.com/embed/QlYgnf_qCNo >}}\n\n\n\n\n\n#### Quarto visual editor [Part 3]\n\n\n\n{{< video https://www.youtube.com/embed/Au7MqvBCi5Y >}}\n\n\n\n\n#### Quarto visual editor [Part 4]\n\n\n\n{{< video https://www.youtube.com/embed/Auo1hjyeCl4 >}}\n\n\n\n\n\n#### Quarto visual editor [Part 5]\n\n\n\n{{< video https://www.youtube.com/embed/wVf-k1azNE0 >}}\n\n\n\n\n#### LaTeX equations\n\n\n\n{{< video https://www.youtube.com/embed/UGo6mjB4Khk >}}\n\n\n\n\n### Interacting with R\n\nThis series of videos looks at the basic principles of writing code in R and how to integrate R code into a Quarto document.\n\n#### Coding in RStudio visual editor [Part 1]\n\nThis video looks at how to create objects and the structure of commands in R (i.e. the assignment operator, `<-`).\n\n\n\n{{< video https://www.youtube.com/embed/8QHCx6RXK4Y >}}\n\n\n\n\n\nlow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"></iframe></p>\n\n#### Coding in RStudio visual editor [Part 2]\n\nThis video looks at what a function in R is, what an R package is, and how to install and use them. We look specifically at the `here()` function to give us a filepath.\n\n{{< video https://www.youtube.com/embed/KD5ScL27FRo>}}\n\n#### Coding in RStudio visual editor [Part 3]\n\nThis tutorial explores using the pipe operator to combine functions together.\n\n\n\n{{< video https://www.youtube.com/embed/wYKdgazQ640 >}}\n\n\n\n\n\n#### Coding in RStudio visual editor [Part 4]\n\nThis tutorial explores tibbles and how to render them using the <code>kable()</code> function.\n\n\n\n{{< video https://www.youtube.com/embed/2e17-I6ZW8A >}}\n\n\n\n\n\n#### Coding in RStudio visual editor [Part 5]\nThis tutorial revisits functions to look at what arguments within functions do. We also find out how energetic Iron Maiden songs are on average.\n\n\n\n{{< video https://www.youtube.com/embed/TMXSLof8haA >}}\n\n\n\n\n#### Coding in RStudio visual editor [Part 6]\n\nThis tutorial explores how code chunks are rendered in quarto documents and offers some tips on debugging errors when rendering goes wrong.\n\n\n\n{{< video https://www.youtube.com/embed/DOyhdu5l32Y >}}\n\n\n\n\n\n## Continue Your Journey\n\n\n[Next topic](intro_jasp.qmd)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}